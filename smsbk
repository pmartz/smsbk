#!/bin/bash

#
# smsbk <dirname> [-o <outfile>]
#
# To exclude a subdirectory, add the file .smsbk-exclude to that directory.
#

#
# Configuration.
# Set default values:
#   Override with ~/.smsbk/smsbk.conf or /etc/default/smsbk.conf
outputdir=""
excludetag=.smsbk-exclude
backupsToKeep=5
logfile=$outputdir/smsbk.log
log=0

# Override default config values:
if [ -e $HOME/.smsbk/smsbk.conf ]
then
    source $HOME/.smsbk/smsbk.conf
elif [ -e /etc/default/smsbk.conf ]
then
    source /etc/default/smsbk.conf
fi



# Using 0 for false - no error
argerr=0
dirname=""
outfile=""

# Log the invocation.
if [ $log = 1 ]
then
    echo "--------" >> $logfile
    echo `date +%F-%R`", smsbk $@" >> $logfile
    echo "      outputdir=$outputdir" >> $logfile
    echo "      excludetag=$excludetag" >> $logfile
    echo "      backupsToKeep=$backupsToKeep" >> $logfile
    echo "      logfile=$logfile" >> $logfile
    echo "      log=$log" >> $logfile
fi

case "$#" in
1)
    dirname="$1"
    ;;
3)
    dirname="$1"
    outfile="$3"
    # [ "$2" = "-o" ] returns 0 if true ("no error").
    #   if anything other than "-o", returns 1 ("error").
    [ "$2" = "-o" ] ; argerr=$?
    ;;
*)
    # Set to 1 for error.
    argerr=1
    ;;
esac

if [ !$argerr ]
then
    if [ ! -d $dirname ]
    then
        errmsg="Error: Directory $dirname does not exist."
        echo $errmsg
        argerr=1
        if [ $log = 1 ]
        then
            echo $errmsg >> $logfile
        fi
    fi
    if [ "$outfile" != "" ] && [ -e $outfile ]
    then
        errmsg="Error: Output file $outfile already exists."
        echo $errmsg
        argerr=1
        if [ $log = 1 ]
        then
            echo "    $errmsg" >> $logfile
        fi
    fi
fi

if [ $argerr = 1 ]
then
    echo "Usage: smsbk <dirname> [-o <outfile>]"
    echo "If 'outfile' not specified, name will be auto-generated"
    echo "and written to $outputdir."
    if [ $log = 1 ]
    then
        echo "    Exiting." >> $logfile
    fi
    exit 1
fi


# Convert possible relative dirname to absolute.
workingdir=`pwd`
dirname=`cd "$dirname"; pwd`
cd "$workingdir"

# Generate output file name if necessary.
#   __<dirname-with-hyphens>_SMSBK_YYYY-MM-DD-HHMM.tar.gz
#     (Old format: YYYY-MM-DD-HH-MM_SMSBK_<dirname-with-hyphens>.tar.gz)
if [ "$outfile" = "" ]
then
    dirnameHyphens=`( echo $dirname | sed sx/x-xg )`
    outfile="$outputdir/__`echo $dirnameHyphens`_SMSBK_`date +%F-%H%M`.tar.gz"
fi


# Create the tar command.
tarcmd="tar -cpzf $outfile --directory=/ \
 --exclude-tag=$excludetag \
 --exclude=proc --exclude=sys --exclude=/dev/pts \
 --exclude=$outputdir --one-file-system \
 $dirname"


# Log what we're about to do.
if [ $log = 1 ]
then
    echo "    Backing up: $dirname" >> $logfile
    echo "    Writing output to: $outfile" >> $logfile
    echo "    tar command =" >> $logfile
    echo "      $tarcmd" >> $logfile
fi


#
# Issue the tar command.
$tarcmd
tarstatus=$?


#
# Remove old files
fileglob="$outputdir/__"`echo $dirnameHyphens`"_SMSBK_*.tar.gz"
numBackups=`ls -l $fileglob | wc -l`
while [ "$numBackups" -gt "$backupsToKeep" ]
do
    targetfile=`ls -t1 $fileglob | tail -1`
    if [ $log = 1 ]
    then
        echo "    Removing $targetfile" >> $logfile
    fi
    rm -f $targetfile
    numBackups=`ls -l $fileglob | wc -l`
done


if [ $log = 1 ]
then
    if [ $tarstatus = 0 ]
    then
        echo `date +%F-%R`", Exiting normally." >> $logfile
    else
        echo `date +%F-%R`", Exiting with error $tarstatus." >> $logfile
    fi
fi

exit 0
